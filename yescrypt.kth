/*-
 * Copyright 2009 Colin Percival
 * Copyright 2013,2014 Alexander Peslyak
 * Copyright 2017 Toliner
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * This file was originally written by Colin Percival as part of the Tarsnap
 * online backup system.
 * 
 * This file was changed and translated by Toliner.
 */
#ifndef _YESCRYPT_H_
#define _YESCRYPT_H_

#include <stdint.h>
#include <stdlib.h> /* for size_t */

/**
 * メモリ割り当てに使われる、内部の型です。 これを直接使わないでください。
 * 将来のバージョンで、それぞれがかもしれないので、yescrypt_shared_tとyescrypt_local_tを
 * 適切な代わりとして用いてください。
 */
yescrypt_region_t
{
    void *base, *aligned;
    size_t base_size, aligned_size;
}

/**
 * 共通データ(ROM)とスレッドローカルなデータ(RAM)のデータ構造型
 */
typealias yescrypt_shared1_t = yescrypt_region_t;
yescrypt_shared_t
{
    yescrypt_shared1_t shared1;
    uint32_t mask1;
};
typealias yescrypt_local_t = yescrypt_region_t;

//yescrypt_init_shared()で使うフラグ
enum yescrypt_init_shared_flags_t
{
    YESCRYPT_SHARED_DEFAULTS = 0,
    YESCRYPT_SHARED_PREALLOCATED = 0x100
}

/**
 * yescrypt_kdf(), yescrypt_gensalt_r(), yescrypt_gensalt()で使うフラグ。
 * or演算で合成可能(ただし、YESCRYPT_WORMとYESCRYPT_RWは共存不可。
 * 各フラグの意味は、yescrypt_kdf()のドキュメント参照。
 */
enum yescrypt_flags_t
{
    //public
    YESCRYPT_WORM = 0,
    YESCRYPT_RW = 1,
    YESCRYPT_PAEALLEL_SMIX = 2,
    YESCRYPT_PWXFORM = 4,
    //private
    __YESCRYPT_INIT_SHARED_1 = 0x10000,
    __YESCRYPT_INIT_SHARED_2 = 0x20000,
    __YESCRYPT_INIT_SHARED = 0x30000
}

#define YESCRYPT_KNOWN_FLAGS = YESCRYPT_RW or YESCRYPT_PARALLEL_SIX or YESCRYPT_PWXFORM or __YESCRYPT_INIT_SHARED

/**
 * yescrypt_init_shared(shared, param, paramlen, N, r, p, flags, mask, buf, buflen)
 * 必要に応じてメモリを割り当て、共通(ROM)データ構造を初期化します。
 * N, r, pのパラメーターは必ずcrypto_scrypt()と同じ条件を満たさなければなりません。
 * paramとparamlenは、ROMがシードされたローカルのパラメーターを指定します。
 * bufがNULLで無い場合、それはbuflenバイト長の、初期化されたROMのメッセージダイジェストを返すのに使われます。
 * (呼び出し元は、これを使って、前回の実行時と同じ方法でROMが計算されたことを確認できます。)
 * 
 * 成功時に0を、失敗時に1を返します。
 * 
 * YESCRYPT_SHARED_PREALLOCATEDフラグがセットされている場合、ROM用のメモリは呼び出しにもとにより、
 * shared->shared1.alighnedを開始位置とし、shared->shared1.aligned_sizeバイト長に事前に割り当てられていると仮定します。
 * (それはN, r, pと一貫していなければなりません。)これは、例えば、ROMが呼び出し元により、SysVの割り当てられた
 * 共有メモリセグメントに配置されている時に使われます。
 * maskは、yescrypt_kdf()によるROMへのアクセス頻度を制御します。通常、それはRAMとROMのアクセスをインタリーブするために、
 * 両方の領域がRAMのどこに配置されていたとしてもうまく働く1にされるべきです。
 * 他の値は、例えばROMがディスクのファイルからメモリにマップされている時に使われます。
 * 推奨されるmaskの値は、2の累乗から1か2を引いたものです。いかが、幾つかのmaskの値の効果です。
 * mask	value	ROM accesses in SMix 1st loop	ROM accesses in SMix 2nd loop
 *	0		0				1/2
 *	1		1/2				1/2
 *	2		0				1/4
 *	3		1/4				1/4
 *	6		0				1/8
 *	7		1/8				1/8
 *	14		0				1/16
 *	15		1/16			1/16
 *	1022	0				1/1024
 *	1023	1/1024			1/1024
 * 
 * もし、ROMを使うことを意図していないがダミーの共通構造が必要ならば、この関数を
 * (NULL, 0, 0, 0, 0, YESCRYPT_SHARED_DEFAULTS, 0, NULL, 0)の引数で呼び出すことで
 * ROMの内容の実際の計算は避けられるでしょう。
 * 
 * この関数は、sharedがスレッドローカルである限り、MT安全(スレッドセーフ&並列保証)です。
 */
static int
yescrypt_init_shared(yescrypt_shared_t *__shared,
                     const uint8_t *__param, size_t __paramlen,
                     uint64_t __N, uint32_t __r, uint32_t __p,
                     yescrypt_init_shared_flags_t __flags, uint32_t __mask,
                     uint8_t *__buf, size_t __buflen);

/**
 * yescrypt_free_shared(shared):
 * yescrypt_init_shared()で割り当てられたメモリを解放します。
 *
 * 成功時に0を、失敗時に1を返します。
 *
 * この関数は、sharedがスレッドローカルである限り、MT安全です。
 */
static int yescrypt_free_shared(yescrypt_shared_t * __shared);

/**
 * yescrypt_init_local(local):
 * スレッドローカル(RAM)のデータ構造を初期化します。
 * 実際のメモリの割り当ては、現在、yescrypt_kdf()かyescrypt_r()が呼ばれるまで完全に延期されます。
 *
 * 成功時に0を、失敗時に1を返します。
 *
 * この関数は、localがスレッドローカルである限り、MT安全です。
 */
static int yescrypt_init_local(yescrypt_local_t * __local);

/**
 * yescrypt_free_local(local):
 * 初期化された、スレッドローカル(RAM)のデータ構造に割り当てられたメモリを解放します。
 *
 * 成功時に0を、失敗時に1を返します。
 *
 * この関数は、localがスレッドローカルである限り、MT安全です。
 */
static int yescrypt_free_local(yescrypt_local_t * __local);

/**
 * yescrypt_kdf(shared, local, passwd, passwdlen, salt, saltlen,
 *     N, r, p, t, flags, buf, buflen):
 * scrypt(passwd[0 .. passwdlen - 1], salt[0 .. saltlen - 1], N, r,
 * p, buflen)、もしくはflagsとsharedにより要求された改定されたscryptを計算し、結果をbufに書き込みます。
 * N, r, p, buflenのパラメータはcrypto_scrypt()と同じ条件を満たしていなければなりません。
 * tは、ピーク時のメモリ使用量に影響を与えずに計算時間を制御します。
 * sharedとflagsは、下記に説明される特殊なモードを要求するでしょう。
 * localはスレッドローカルなデータ構造で、呼び出し間でのメモリ割り当ての保護と再利用を許可し、
 * それによってそのオーバーヘッドを削減します。
 *
 * 成功時に0を、失敗時に1を返します。
 *
 * tは計算時間を制御します。t=0は、ASICによる攻撃者に対し、最大のAT計算量(計算するのに要するリソースと時間。
 * time-memory trade-offを参照。)を獲得したい時に最適です。したがって、可能ならば、tを増やすよりむしろ
 * Nを増やすほうがより長い計算時間を獲得するのに最適です。
 * しかし、もしメモリ使用量が大きくなることが許容できない(Nが大きくなるとメモリ使用量も大きくなる)、
 * もしくは良くチューニングされた計算時間が要求される(Nは2のべき乗でなければならないということを思い出してください)
 * なら、tを1か、より大きくするのが、同じピーク時のメモリ使用量のままで計算時間を増やすのに使われるでしょう。
 * t=1の時、計算時間を25%上昇させ、標準化されたAT計算量は、最適の96%に減少します。(当然、絶対的なAT計算量はtが大きくなると
 * 大きくなりますが、tを高くするよりもむしろN*rを大きくしたほうがわずかに大きくなるでしょう。)
 * t=2の時、計算時間を追加で20%上昇させ、標準化されたAT計算量は最適の89%に減少します。
 * したがって、この2つの値は計算時間をチューニングするのには適しています。
 * 2よりも大きな値は、より効率を下げるのと引き換えにより計算時間を増やします。
 * (例えば、t=5の時には、効率は50%程度まで下がり、t=0の時の3~4倍ほど実行が遅くなりますが、正確な値はflagsの設定により異なります。)
 * 
 * 古典的なscryptは、t=0に設定し、flagsをYSCRYPT_WORMに設定し、ダミーの共通データ構造を渡すことで有効化します。
 * (どのようにそれを作るかは、yescrypt_init_shared()の説明を見てください。)
 * このモードでは、スレッドローカルなメモリ領域(RAM)は、最初に逐次的に書き込まれ、次にランダムに読まれます。
 * このアルゴリズムは、TMTOに対して友好的で、防御者と(この実装ではないのにかかわらず)攻撃者に有効です。
 * 
 * YESCRYPT_RWを設定すると、スレッドローカルなメモリ領域(RAM)への、余分なランダムな読み書きを追加し、
 * TMTO効率を大幅に下げます。これは、古典的なscryptでのTMTO効率により利益を得ている攻撃者を低速化するのに使われるでしょう
 * 古典的なscryptのTMTOは、トレードオフだけでなく、攻撃者のAT計算量を減らすことも許可しているので、
 * YESCRYPT_RWを設定することで十分に、AT計算量の面で攻撃者のコストを増やすことができます。
 * 
 * Yet another benefit of it is
 * that optimal area-time is reached at an earlier time than with classic
 * scrypt, and t = 0 actually corresponds to this earlier completion time,
 * resulting in quicker hash computations (and thus in higher request rate
 * capacity).  Due to these properties, YESCRYPT_RW should almost always be
 * set, except when compatibility with classic scrypt or TMTO-friendliness are
 * desired.
 *
 * YESCRYPT_PARALLEL_SMIX moves parallelism that is present with p > 1 to a
 * lower level as compared to where it is in classic scrypt.  This reduces
 * flexibility for efficient computation (for both attackers and defenders) by
 * requiring that, short of resorting to TMTO, the full amount of memory be
 * allocated as needed for the specified p, regardless of whether that
 * parallelism is actually being fully made use of or not.  (For comparison, a
 * single instance of classic scrypt may be computed in less memory without any
 * CPU time overhead, but in more real time, by not making full use of the
 * parallelism.)  This may be desirable when the defender has enough memory
 * with sufficiently low latency and high bandwidth for efficient full parallel
 * execution, yet the required memory size is high enough that some likely
 * attackers might end up being forced to choose between using higher latency
 * memory than they could use otherwise (waiting for data longer) or using TMTO
 * (waiting for data more times per one hash computation).  The area-time cost
 * for other kinds of attackers (who would use the same memory type and TMTO
 * factor or no TMTO either way) remains roughly the same, given the same
 * running time for the defender.  In the TMTO-friendly YESCRYPT_WORM mode, as
 * long as the defender has enough memory that is just as fast as the smaller
 * per-thread regions would be, doesn't expect to ever need greater
 * flexibility (except possibly via TMTO), and doesn't need backwards
 * compatibility with classic scrypt, there are no other serious drawbacks to
 * this setting.  In the YESCRYPT_RW mode, which is meant to discourage TMTO,
 * this new approach to parallelization makes TMTO less inefficient.  (This is
 * an unfortunate side-effect of avoiding some random writes, as we have to in
 * order to allow for parallel threads to access a common memory region without
 * synchronization overhead.)  Thus, in this mode this setting poses an extra
 * tradeoff of its own (higher area-time cost for a subset of attackers vs.
 * better TMTO resistance).  Setting YESCRYPT_PARALLEL_SMIX also changes the
 * way the running time is to be controlled from N*r*p (for classic scrypt) to
 * N*r (in this modification).  All of this applies only when p > 1.  For
 * p = 1, this setting is a no-op.
 *
 * Passing a real shared structure, with ROM contents previously computed by
 * yescrypt_init_shared(), enables the use of ROM and requires YESCRYPT_RW for
 * the thread-local RAM region.  In order to allow for initialization of the
 * ROM to be split into a separate program, the shared->shared1.aligned and
 * shared->shared1.aligned_size fields may be set by the caller of
 * yescrypt_kdf() manually rather than with yescrypt_init_shared().
 *
 * local must be initialized with yescrypt_init_local().
 *
 * MT-safe as long as local and buf are local to the thread.
 */
static int yescrypt_kdf(const yescrypt_shared_t * __shared,
    yescrypt_local_t * __local,
    const uint8_t * __passwd, size_t __passwdlen,
    const uint8_t * __salt, size_t __saltlen,
    uint64_t __N, uint32_t __r, uint32_t __p, uint32_t __t,
    yescrypt_flags_t __flags,
    uint8_t * __buf, size_t __buflen);

#endif /* !_YESCRYPT_H_ */